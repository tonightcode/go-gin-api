///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package top

import (
	"fmt"
	"time"

	"go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Top {
	return new(Top)
}

func NewQueryBuilder() *topQueryBuilder {
	return new(topQueryBuilder)
}

func (t *Top) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Topid, nil
}

type topQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *topQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *topQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Top{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *topQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Top{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *topQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Top{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *topQueryBuilder) First(db *gorm.DB) (*Top, error) {
	ret := &Top{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *topQueryBuilder) QueryOne(db *gorm.DB) (*Top, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *topQueryBuilder) QueryAll(db *gorm.DB) ([]*Top, error) {
	var ret []*Top
	err := qb.buildQuery(db).Preload("Songs").Find(&ret).Error
	if err != nil {
		return nil, err
	}
	// 预加载关联的歌曲信息
	for _, top := range ret {
		err := db.Model(top).Group("songid").Association("Songs").Find(&top.Songs)
		if err != nil {
			return nil, err
		}
	}
	return ret, nil
}

func (qb *topQueryBuilder) Limit(limit int) *topQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *topQueryBuilder) Offset(offset int) *topQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *topQueryBuilder) WhereTopid(p mysql.Predicate, value int32) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topid", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereTopidIn(value []int32) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topid", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereTopidNotIn(value []int32) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByTopid(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "topid "+order)
	return qb
}

func (qb *topQueryBuilder) WhereName(p mysql.Predicate, value string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereNameIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereNameNotIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByName(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *topQueryBuilder) WhereCover(p mysql.Predicate, value string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cover", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereCoverIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cover", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereCoverNotIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cover", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByCover(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "cover "+order)
	return qb
}

func (qb *topQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "top.is_deleted", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereIsDeletedIn(value []int32) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereIsDeletedNotIn(value []int32) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByIsDeleted(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *topQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereCreatedAtIn(value []time.Time) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByCreatedAt(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *topQueryBuilder) WhereCreatedUser(p mysql.Predicate, value string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereCreatedUserIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereCreatedUserNotIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByCreatedUser(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *topQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereUpdatedAtIn(value []time.Time) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByUpdatedAt(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *topQueryBuilder) WhereUpdatedUser(p mysql.Predicate, value string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereUpdatedUserIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) WhereUpdatedUserNotIn(value []string) *topQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topQueryBuilder) OrderByUpdatedUser(asc bool) *topQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
