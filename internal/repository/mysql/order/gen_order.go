///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package order

import (
	"fmt"
	"time"

	"github.com/xinliangnote/go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Order {
	return new(Order)
}

func NewQueryBuilder() *orderQueryBuilder {
	return new(orderQueryBuilder)
}

func (t *Order) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

type orderQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *orderQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *orderQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&Order{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *orderQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&Order{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *orderQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Order{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *orderQueryBuilder) First(db *gorm.DB) (*Order, error) {
	ret := &Order{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *orderQueryBuilder) QueryOne(db *gorm.DB) (*Order, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *orderQueryBuilder) QueryAll(db *gorm.DB) ([]*Order, error) {
	var ret []*Order
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *orderQueryBuilder) Limit(limit int) *orderQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *orderQueryBuilder) Offset(offset int) *orderQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *orderQueryBuilder) WhereId(p mysql.Predicate, value int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereIdIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereIdNotIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderById(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereOrderNo(p mysql.Predicate, value string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_no", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereOrderNoIn(value []string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_no", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereOrderNoNotIn(value []string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_no", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByOrderNo(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "order_no "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereOrderFee(p mysql.Predicate, value int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_fee", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereOrderFeeIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_fee", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereOrderFeeNotIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order_fee", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByOrderFee(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "order_fee "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereStatus(p mysql.Predicate, value int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereStatusIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereStatusNotIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "status", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByStatus(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "status "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereIsDeletedIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereIsDeletedNotIn(value []int32) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByIsDeleted(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereCreatedAtIn(value []time.Time) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByCreatedAt(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereCreatedUser(p mysql.Predicate, value string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereCreatedUserIn(value []string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereCreatedUserNotIn(value []string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByCreatedUser(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereUpdatedAtIn(value []time.Time) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByUpdatedAt(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *orderQueryBuilder) WhereUpdatedUser(p mysql.Predicate, value string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereUpdatedUserIn(value []string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) WhereUpdatedUserNotIn(value []string) *orderQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *orderQueryBuilder) OrderByUpdatedUser(asc bool) *orderQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
