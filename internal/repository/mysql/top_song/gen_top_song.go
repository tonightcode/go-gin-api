///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package top_song

import (
	"fmt"
	"time"

	"go-gin-api/internal/repository/mysql"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *TopSong {
	return new(TopSong)
}

func NewQueryBuilder() *topSongQueryBuilder {
	return new(topSongQueryBuilder)
}

func (t *TopSong) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Topid, nil
}

type topSongQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *topSongQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *topSongQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	db = db.Model(&TopSong{})

	for _, where := range qb.where {
		db.Where(where.prefix, where.value)
	}

	if err = db.Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *topSongQueryBuilder) Delete(db *gorm.DB) (err error) {
	for _, where := range qb.where {
		db = db.Where(where.prefix, where.value)
	}

	if err = db.Delete(&TopSong{}).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (qb *topSongQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&TopSong{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *topSongQueryBuilder) First(db *gorm.DB) (*TopSong, error) {
	ret := &TopSong{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *topSongQueryBuilder) QueryOne(db *gorm.DB) (*TopSong, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *topSongQueryBuilder) QueryAll(db *gorm.DB) ([]*TopSong, error) {
	var ret []*TopSong
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *topSongQueryBuilder) Limit(limit int) *topSongQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *topSongQueryBuilder) Offset(offset int) *topSongQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *topSongQueryBuilder) WhereTopid(p mysql.Predicate, value int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topid", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereTopidIn(value []int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topid", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereTopidNotIn(value []int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "topid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderByTopid(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "topid "+order)
	return qb
}

func (qb *topSongQueryBuilder) WhereSongid(p mysql.Predicate, value int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "songid", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereSongidIn(value []int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "songid", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereSongidNotIn(value []int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "songid", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderBySongid(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "songid "+order)
	return qb
}

func (qb *topSongQueryBuilder) WhereIsDeleted(p mysql.Predicate, value int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereIsDeletedIn(value []int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereIsDeletedNotIn(value []int32) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderByIsDeleted(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *topSongQueryBuilder) WhereCreatedAt(p mysql.Predicate, value time.Time) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereCreatedAtIn(value []time.Time) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderByCreatedAt(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *topSongQueryBuilder) WhereCreatedUser(p mysql.Predicate, value string) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereCreatedUserIn(value []string) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereCreatedUserNotIn(value []string) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderByCreatedUser(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_user "+order)
	return qb
}

func (qb *topSongQueryBuilder) WhereUpdatedAt(p mysql.Predicate, value time.Time) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereUpdatedAtIn(value []time.Time) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderByUpdatedAt(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *topSongQueryBuilder) WhereUpdatedUser(p mysql.Predicate, value string) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", p),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereUpdatedUserIn(value []string) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) WhereUpdatedUserNotIn(value []string) *topSongQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_user", "NOT IN"),
		value,
	})
	return qb
}

func (qb *topSongQueryBuilder) OrderByUpdatedUser(asc bool) *topSongQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_user "+order)
	return qb
}
